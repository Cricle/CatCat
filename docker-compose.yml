version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: catcat-postgres
    environment:
      POSTGRES_DB: catcat
      POSTGRES_USER: catcat
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-catcat_dev_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U catcat -d catcat"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - catcat-network
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: catcat-redis
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD:-catcat_dev_password}
      --appendonly yes
      --appendfsync everysec
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD:-catcat_dev_password}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - catcat-network
    restart: unless-stopped

  # NATS with JetStream
  nats:
    image: nats:2.10-alpine
    container_name: catcat-nats
    command:
      - "-js"
      - "-sd"
      - "/data"
      - "-m"
      - "8222"
      - "--max_payload"
      - "8MB"
      - "--max_connections"
      - "1000"
    ports:
      - "${NATS_CLIENT_PORT:-4222}:4222"  # Client
      - "${NATS_MONITOR_PORT:-8222}:8222"  # Monitoring
    volumes:
      - nats_data:/data
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8222/healthz"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - catcat-network
    restart: unless-stopped

  # MinIO Object Storage
  minio:
    image: minio/minio:latest
    container_name: catcat-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-catcat}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-catcat_dev_password}
      MINIO_BROWSER_REDIRECT_URL: http://localhost:9001
    ports:
      - "${MINIO_API_PORT:-9000}:9000"  # API
      - "${MINIO_CONSOLE_PORT:-9001}:9001"  # Console
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    networks:
      - catcat-network
    restart: unless-stopped

  # Jaeger - Distributed Tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: catcat-jaeger
    environment:
      COLLECTOR_OTLP_ENABLED: "true"
      SPAN_STORAGE_TYPE: memory
      MEMORY_MAX_TRACES: 100000
    ports:
      - "${JAEGER_UI_PORT:-16686}:16686"  # Jaeger UI
      - "${JAEGER_OTLP_GRPC_PORT:-4317}:4317"  # OTLP gRPC
      - "${JAEGER_OTLP_HTTP_PORT:-4318}:4318"  # OTLP HTTP
    networks:
      - catcat-network
    restart: unless-stopped

  # Prometheus - Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    container_name: catcat-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - catcat-network
    restart: unless-stopped

  # Grafana - Metrics Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: catcat-grafana
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_ADMIN_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD:-admin}
      GF_INSTALL_PLUGINS: grafana-piechart-panel,grafana-clock-panel
      GF_SERVER_ROOT_URL: http://localhost:${GRAFANA_PORT:-3001}
      GF_AUTH_ANONYMOUS_ENABLED: "true"
      GF_AUTH_ANONYMOUS_ORG_ROLE: Viewer
    ports:
      - "${GRAFANA_PORT:-3001}:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - catcat-network
    restart: unless-stopped

  # CatCat API
  api:
    build:
      context: .
      dockerfile: src/CatCat.API/Dockerfile
    container_name: catcat-api
    environment:
      ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT:-Development}
      ASPNETCORE_URLS: http://+:8080
      # Database
      ConnectionStrings__Database: "Host=postgres;Port=5432;Database=catcat;Username=catcat;Password=${POSTGRES_PASSWORD:-catcat_dev_password};Include Error Detail=true"
      # Redis
      ConnectionStrings__Redis: "redis:6379,password=${REDIS_PASSWORD:-catcat_dev_password},abortConnect=false"
      # NATS
      ConnectionStrings__Nats: "nats://nats:4222"
      # MinIO
      MinIO__Endpoint: "minio:9000"
      MinIO__AccessKey: "${MINIO_ROOT_USER:-catcat}"
      MinIO__SecretKey: "${MINIO_ROOT_PASSWORD:-catcat_dev_password}"
      MinIO__BucketName: "catcat-media"
      MinIO__UseSSL: "false"
      # JWT
      Jwt__SecretKey: "${JWT_SECRET_KEY:-dev-secret-key-change-in-production-at-least-32-chars}"
      Jwt__Issuer: "CatCat.API"
      Jwt__Audience: "CatCat.Client"
      Jwt__ExpiryMinutes: "1440"
      # Stripe
      Stripe__SecretKey: "${STRIPE_SECRET_KEY:-sk_test_placeholder}"
      Stripe__PublishableKey: "${STRIPE_PUBLISHABLE_KEY:-pk_test_placeholder}"
      Stripe__WebhookSecret: "${STRIPE_WEBHOOK_SECRET:-whsec_placeholder}"
      # OpenTelemetry
      OpenTelemetry__ServiceName: "CatCat.API"
      OpenTelemetry__Endpoint: "http://jaeger:4317"
      # Logging
      Serilog__MinimumLevel__Default: "Information"
      Serilog__MinimumLevel__Override__Microsoft: "Warning"
      Serilog__MinimumLevel__Override__System: "Warning"
    ports:
      - "${API_PORT:-5000}:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      nats:
        condition: service_healthy
      minio:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - catcat-network
    restart: unless-stopped

  # CatCat Web Frontend
  web:
    build:
      context: src/CatCat.Web
      dockerfile: Dockerfile
    container_name: catcat-web
    environment:
      VITE_API_BASE_URL: http://localhost:${API_PORT:-5000}
    ports:
      - "${WEB_PORT:-3000}:80"
    depends_on:
      api:
        condition: service_healthy
    networks:
      - catcat-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  nats_data:
    driver: local
  minio_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  catcat-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
